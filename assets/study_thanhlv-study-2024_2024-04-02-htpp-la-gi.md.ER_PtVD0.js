import{_ as n,j as e,o as a,v as t}from"./chunks/framework.9xwLhOZU.js";const i=JSON.parse('{"title":"HTTP là gì?","description":"","frontmatter":{"footer":true,"title":"HTTP là gì?","authors":["lethanh"],"date":"2024-04-02T00:00:00.000Z","outline":"deep","image":"/assets/img.RZzLTS7U.png","draft":false,"group":"1. Internet"},"headers":[{"level":2,"title":"Giới thiệu về HTTP","slug":"gioi-thieu-ve-http","link":"#gioi-thieu-ve-http","children":[]},{"level":2,"title":"Overview cách hoạt động tổng thể về HTTP.","slug":"overview-cach-hoat-đong-tong-the-ve-http","link":"#overview-cach-hoat-đong-tong-the-ve-http","children":[]},{"level":2,"title":"1. Protocol Parameters(Các thông số trong giao thức)","slug":"_1-protocol-parameters-cac-thong-so-trong-giao-thuc","link":"#_1-protocol-parameters-cac-thong-so-trong-giao-thuc","children":[{"level":3,"title":"1.1 HTTP Version","slug":"_1-1-http-version","link":"#_1-1-http-version","children":[]},{"level":3,"title":"1.2 Uniform Resource Identifiers","slug":"_1-2-uniform-resource-identifiers","link":"#_1-2-uniform-resource-identifiers","children":[]},{"level":3,"title":"1.2.1 General Syntax","slug":"_1-2-1-general-syntax","link":"#_1-2-1-general-syntax","children":[]},{"level":3,"title":"1.2.2 HTTP URL","slug":"_1-2-2-http-url","link":"#_1-2-2-http-url","children":[]},{"level":3,"title":"1.3 Date format","slug":"_1-3-date-format","link":"#_1-3-date-format","children":[]},{"level":3,"title":"1.3.2 định vị thời gian bằng giây.","slug":"_1-3-2-đinh-vi-thoi-gian-bang-giay","link":"#_1-3-2-đinh-vi-thoi-gian-bang-giay","children":[]},{"level":3,"title":"1.4 Character Sets","slug":"_1-4-character-sets","link":"#_1-4-character-sets","children":[]},{"level":3,"title":"1.5 Content Codings","slug":"_1-5-content-codings","link":"#_1-5-content-codings","children":[{"level":4,"title":"1 số thuật toán encoding","slug":"_1-so-thuat-toan-encoding","link":"#_1-so-thuat-toan-encoding","children":[]}]},{"level":3,"title":"1.6 Chunked Transfer Encoding","slug":"_1-6-chunked-transfer-encoding","link":"#_1-6-chunked-transfer-encoding","children":[]},{"level":3,"title":"1.7 Media type.","slug":"_1-7-media-type","link":"#_1-7-media-type","children":[]},{"level":3,"title":"1.8 Product Tokens","slug":"_1-8-product-tokens","link":"#_1-8-product-tokens","children":[]},{"level":3,"title":"1.9 Quality Values","slug":"_1-9-quality-values","link":"#_1-9-quality-values","children":[]},{"level":3,"title":"1.10 Language Tags","slug":"_1-10-language-tags","link":"#_1-10-language-tags","children":[]},{"level":3,"title":"1.11 Entity Tags","slug":"_1-11-entity-tags","link":"#_1-11-entity-tags","children":[]},{"level":3,"title":"1.12 Range Units","slug":"_1-12-range-units","link":"#_1-12-range-units","children":[]}]},{"level":2,"title":"2. HTTP Message","slug":"_2-http-message","link":"#_2-http-message","children":[{"level":4,"title":"2.1.1 Message Headers","slug":"_2-1-1-message-headers","link":"#_2-1-1-message-headers","children":[]},{"level":4,"title":"2.1.2 Request Message(Tin nhắn yêu cầu)","slug":"_2-1-2-request-message-tin-nhan-yeu-cau","link":"#_2-1-2-request-message-tin-nhan-yeu-cau","children":[]},{"level":4,"title":"2.1.3 Response Message(Tin nhắn phản hồi)","slug":"_2-1-3-response-message-tin-nhan-phan-hoi","link":"#_2-1-3-response-message-tin-nhan-phan-hoi","children":[]},{"level":4,"title":"2.1.4 Message Body","slug":"_2-1-4-message-body","link":"#_2-1-4-message-body","children":[]}]},{"level":2,"title":"3 Request","slug":"_3-request","link":"#_3-request","children":[{"level":3,"title":"3.1 Request-Line","slug":"_3-1-request-line","link":"#_3-1-request-line","children":[]},{"level":3,"title":"3.1.1 Method","slug":"_3-1-1-method","link":"#_3-1-1-method","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"REF:","slug":"ref","link":"#ref","children":[]}],"relativePath":"study/thanhlv-study-2024/2024-04-02-htpp-la-gi.md","filePath":"study/thanhlv-study-2024/2024-04-02-htpp-la-gi.md","lastUpdated":1737627439000}'),s={name:"study/thanhlv-study-2024/2024-04-02-htpp-la-gi.md"},l=[t('<h1 id="http-la-gi" tabindex="-1">HTTP là gì? <a class="header-anchor" href="#http-la-gi" aria-label="Permalink to &quot;HTTP là gì?&quot;">​</a></h1><p>Trong bối cảnh sự phát triển mạnh mẽ của <a href="./2024-03-18-world-wide-web-la-gi.html">WWW( World Wide Web )</a>, một trong những yếu tố không thể phủ nhận là vai trò quan trọng của HTTP (Hypertext Transfer Protocol). Được sử dụng rộng rãi không chỉ trên <a href="./2024-03-18-world-wide-web-la-gi.html">WWW( World Wide Web )</a> mà còn trên nhiều hệ thống mạng khác, HTTP đóng vai trò chìa khóa trong việc truyền tải thông tin trên internet.</p><p>Hãy cùng khám phá thêm về giao thức HTTP trong bài viết này.</p><nav class="table-of-contents"><ul><li><a href="#gioi-thieu-ve-http">Giới thiệu về HTTP</a></li><li><a href="#overview-cach-hoat-đong-tong-the-ve-http">Overview cách hoạt động tổng thể về HTTP.</a></li><li><a href="#_1-protocol-parameters-cac-thong-so-trong-giao-thuc">1. Protocol Parameters(Các thông số trong giao thức)</a><ul><li><a href="#_1-1-http-version">1.1 HTTP Version</a></li><li><a href="#_1-2-uniform-resource-identifiers">1.2 Uniform Resource Identifiers</a></li><li><a href="#_1-2-1-general-syntax">1.2.1 General Syntax</a></li><li><a href="#_1-2-2-http-url">1.2.2 HTTP URL</a></li><li><a href="#_1-3-date-format">1.3 Date format</a></li><li><a href="#_1-3-2-đinh-vi-thoi-gian-bang-giay">1.3.2 định vị thời gian bằng giây.</a></li><li><a href="#_1-4-character-sets">1.4 Character Sets</a></li><li><a href="#_1-5-content-codings">1.5 Content Codings</a><ul><li><a href="#_1-so-thuat-toan-encoding">1 số thuật toán encoding</a></li></ul></li><li><a href="#_1-6-chunked-transfer-encoding">1.6 Chunked Transfer Encoding</a></li><li><a href="#_1-7-media-type">1.7 Media type.</a></li><li><a href="#_1-8-product-tokens">1.8 Product Tokens</a></li><li><a href="#_1-9-quality-values">1.9 Quality Values</a></li><li><a href="#_1-10-language-tags">1.10 Language Tags</a></li><li><a href="#_1-11-entity-tags">1.11 Entity Tags</a></li><li><a href="#_1-12-range-units">1.12 Range Units</a></li></ul></li><li><a href="#_2-http-message">2. HTTP Message</a><ul><li><a href="#_2-1-1-message-headers">2.1.1 Message Headers</a></li><li><a href="#_2-1-2-request-message-tin-nhan-yeu-cau">2.1.2 Request Message(Tin nhắn yêu cầu)</a></li><li><a href="#_2-1-3-response-message-tin-nhan-phan-hoi">2.1.3 Response Message(Tin nhắn phản hồi)</a></li><li><a href="#_2-1-4-message-body">2.1.4 Message Body</a></li></ul></li><li><a href="#_3-request">3 Request</a><ul><li><a href="#_3-1-request-line">3.1 Request-Line</a></li><li><a href="#_3-1-1-method">3.1.1 Method</a></li></ul></li><li><a href="#"></a></li><li><a href="#ref">REF:</a></li></ul></nav><h2 id="gioi-thieu-ve-http" tabindex="-1">Giới thiệu về HTTP <a class="header-anchor" href="#gioi-thieu-ve-http" aria-label="Permalink to &quot;Giới thiệu về HTTP&quot;">​</a></h2><p>Hypertext Transfer Protocol (HTTP) là một Application-level protocol. HTTP đã được sử dụng bởi WWW ở năm 1990.</p><p>Phiên bản đầu tiên của HTTP là HTTP/0.9. Một giao thức đơn giản cho phép truyền raw data trên Internet.</p><p>Phiên bản HTTP/1.0 được định nghĩa bởi <a href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noreferrer">RFC 1945</a> cho phép không chỉ raw data mà còn có thể gửi nhận các đa phương tiện như hình ảnh, âm thanh và video. Phiên bản 1.0 cũng đưa ra các Method tiêu chuẩn như GET, POST và HEAD để thực hiện các tương tác phức tạp hơn. (Phiên bản 0.9 chỉ có một Method duy nhất là GET)</p><p>Trong bài viết này mình sẽ giới thiệu và học tập nhiều về HTTP.1.1 Một trong những phiên bản được sử dụng lâu đời và rộng dãi trước khi HTTP 2.0 và 3.0 ra đời. <img src="/assets/img.RZzLTS7U.png" alt=""></p><h2 id="overview-cach-hoat-đong-tong-the-ve-http" tabindex="-1">Overview cách hoạt động tổng thể về HTTP. <a class="header-anchor" href="#overview-cach-hoat-đong-tong-the-ve-http" aria-label="Permalink to &quot;Overview cách hoạt động tổng thể về HTTP.&quot;">​</a></h2><p>HTTP protocol là một request/response protocol. Một máy khách gửi một request đến máy chủ dưới dạng một request method, URI, header, protocol version, data, data type và client info. Máy chủ nhận được yêu cầu từ máy khách, xử lý yêu cầu và phàn hồi bằng một status bao gồm thông tin máy chủ, data trả về, data type, HEADER.</p><p>Hầu hết giao tiếp HTTP được khởi tạo bởi một tác nhân người dùng thường gọi là client, một yêu cầu được tạo bởi client(User agent) và gửi đến máy chủ(Server). Máy chủ xử lý yêu cầu và trả lại data. Trong trường hợp đơn giản nhất, quá trình này được thực hiện thông qua một kết nối duy nhất.</p><div class="language-Diagram vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Diagram</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>          request chain ------------------------&gt;</span></span>\n<span class="line"><span>   Client --------single connection------------ Server</span></span>\n<span class="line"><span>          &lt;----------------------- response chain</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Một tình huống phức tạp hơn là một hoặc nhiều người trung gian đứng ở giữa Client và Server trong request/response chain. Các người trung gian này có thể là proxy, gateway, tunnel.</p><p>Proxy là một <code>forwarding agent</code>sử dụng bởi client. Client gửi một request đến proxy sau đó proxy có thể viết lại 1 phần hoặc toàn bộ message và chuyển tiếp request này đến máy chủ URI được xác định bởi client hoặc proxy.</p><p>Gateway là một <code>receiving agent(Đại lý tiếp nhận)</code> được sử dụng bởi máy chủ. Nó sẽ được trước máy chủ nhận tất cả yêu cầu của client cũng có thể làm các bước như proxy sau đó chuyển yêu cấu đến áy chủ.</p><p>Tunnel là một hoạt động ngầm đứng giữa và nó sẽ không làm thay đổi message (Không mã hóa, chỉnh sửa ..etc..), Tunnel được xử dụng khi việc giao tiếp giữa client và server cần phải qua một trung gian(tường lửa) ngay cả khi người trung gian này không cần hiểu về message của request(Không cần giải mã..etc..) đó.</p><div class="language-Diagram vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Diagram</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>single connection(SC)</span></span>\n<span class="line"><span>        request chain -------------------------------------------&gt;</span></span>\n<span class="line"><span> Client -----SC----- A -----SC----- B -----SC----- C -----SC------  Server</span></span>\n<span class="line"><span>        &lt;------------A--------------B--------------C---- response chain</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Trong HTTP/1.0 mỗi yêu cầu client gửi đến máy chủ(request/response) sẽ tạo một kết nối mới. Ở phiên bản 1.1 đã có thể sử dụng 1 kết nối cho nhiều yêu cầu.</p><h2 id="_1-protocol-parameters-cac-thong-so-trong-giao-thuc" tabindex="-1">1. Protocol Parameters(Các thông số trong giao thức) <a class="header-anchor" href="#_1-protocol-parameters-cac-thong-so-trong-giao-thuc" aria-label="Permalink to &quot;1. Protocol Parameters(Các thông số trong giao thức)&quot;">​</a></h2><h3 id="_1-1-http-version" tabindex="-1">1.1 <a href="https://datatracker.ietf.org/doc/html/rfc2145" target="_blank" rel="noreferrer">HTTP Version</a> <a class="header-anchor" href="#_1-1-http-version" aria-label="Permalink to &quot;1.1 [HTTP Version](https://datatracker.ietf.org/doc/html/rfc2145)&quot;">​</a></h3><p>Đối với HTTP sẽ sử dụng format version là <code>&quot;&lt;major&gt;.&lt;minor&gt;&quot;</code> numbering scheme để chỉ ra các phiên bản của HTTP protocol. <code>minor</code>: được thay đổi khi phiên bản này sẽ thay đổi, thêm tính năng nhưng không thay đổ message parsing algorithm(Thuật toán parsing tin nhắn ). <code>major</code>: được thay đổi khi định dạng của message trong protocol thay đổi</p><div class="language-Format vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Format</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HTTP-Version   = &quot;HTTP&quot; &quot;/&quot; 1*DIGIT &quot;.&quot; 1*DIGIT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Lưu ý: Đối với HTTP version, bởi vì sử dụng cấu chúc 1*digit vì vậy phiên bản 2.4 sẽ thấp hơn phiên bản 2.13. Vì 13 sẽ lớn hơn 4.</p><h3 id="_1-2-uniform-resource-identifiers" tabindex="-1">1.2 Uniform Resource Identifiers <a class="header-anchor" href="#_1-2-uniform-resource-identifiers" aria-label="Permalink to &quot;1.2 Uniform Resource Identifiers&quot;">​</a></h3><p>URIs còn được biết đến với nhiều tên như là WWW addresses, Universal Document Identifiers(UDI), <a href="https://datatracker.ietf.org/doc/html/rfc1808" target="_blank" rel="noreferrer">Uniform Resource Locators(URL)</a> hoặc Uniform Resource Name(URN).</p><h3 id="_1-2-1-general-syntax" tabindex="-1">1.2.1 General Syntax <a class="header-anchor" href="#_1-2-1-general-syntax" aria-label="Permalink to &quot;1.2.1 General Syntax&quot;">​</a></h3><p>URis trong HTTP có thể được biểu diễn dưới dạng tuyệt đối hoặc tương đối tùy thuộc vào cách sử dụng. URis luôn luôn bắt đầu với scheme name và sau đó là dấu hai chấm</p><div class="language-Format vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Format</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>${scheme}:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-Example vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>http:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Mặc định HTTP không đặt bất kỳ giới hạn vào về độ dài của URI, máy chủ cần được thiếp lập để xử lý một URI có độ dài không giới hạn.</p><h3 id="_1-2-2-http-url" tabindex="-1">1.2.2 HTTP URL <a class="header-anchor" href="#_1-2-2-http-url" aria-label="Permalink to &quot;1.2.2 HTTP URL&quot;">​</a></h3><p>HTTP schme được sử dụng để định vị tài nguyên trên internet thông qua HTTP protocol. Dưới đây là scheme-specific syntax của HTTP URLs.</p><div class="language-HTTP_URL_FORMAT vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTTP_URL_FORMAT</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>http_URL = &quot;http:&quot; &quot;//&quot; host [ &quot;:&quot; port ] [ abs_path [ &quot;?&quot; query ]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>HTTP protocol sẽ sử dụng port mặc định là 80. Vì vậy nếu trong HTTP URL không xác định port thì mặc định sẽ sử dụng port 80</p><h3 id="_1-3-date-format" tabindex="-1">1.3 Date format <a class="header-anchor" href="#_1-3-date-format" aria-label="Permalink to &quot;1.3 Date format&quot;">​</a></h3><p>HTTP cho phép 3 định dạng khác nhau về date/time format gồm:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>      Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123</span></span>\n<span class="line"><span>      Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036</span></span>\n<span class="line"><span>      Sun Nov  6 08:49:37 1994       ; ANSI C&#39;s asctime() forma</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Trong đó định dạng đầu tiên <code>RFC 822</code>được sử dụng nhiều nhất vì nó xác định rõ năm 4 chữ số và múi giờ GMT. Theo spec của HTTP, tất cả ngày giờ trên HTTP sẽ bắt buộc yêu cầu sử dụng giờ GMT.(UTC-0)</p><h3 id="_1-3-2-đinh-vi-thoi-gian-bang-giay" tabindex="-1">1.3.2 định vị thời gian bằng giây. <a class="header-anchor" href="#_1-3-2-đinh-vi-thoi-gian-bang-giay" aria-label="Permalink to &quot;1.3.2 định vị thời gian bằng giây.&quot;">​</a></h3><p>Một số HTTP Header cho phep time value được định nghĩa bằng một số number bằng giây.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>delta-seconds  = 1*DIGIT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-4-character-sets" tabindex="-1">1.4 Character Sets <a class="header-anchor" href="#_1-4-character-sets" aria-label="Permalink to &quot;1.4 Character Sets&quot;">​</a></h3><p>Trong HTTP để xác định kiểu dữ liệu gửi chúng ta có thể sử dụng <code>Content-Type</code> header. Nếu <code>Content-Type</code> không được set, người nhận sẽ cần phải đoán <code>Content-Type</code> Ví dụ về <code>Content-Type</code> json</p><div class="language-HTTP_HEADER vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTTP_HEADER</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Type: application/json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-5-content-codings" tabindex="-1">1.5 Content Codings <a class="header-anchor" href="#_1-5-content-codings" aria-label="Permalink to &quot;1.5 Content Codings&quot;">​</a></h3><p>Trong HTTP, content(body) có thể được encoding trước khi gửi, encoding ở HTTP chủ yếu phục vụ cho việc nén dữ liệu.</p><p>Khi client gửi yêu cầu lên máy chủ sẽ cần kèm theo HEADER <code>Accept-Encoding</code> để xác định các thuật toán encoding có thể được sử dụng bởi client.</p><p>Sau đó client sẽ encoding và gửi kèm HEADER <code>Content-Encoding</code> để xác định thuật tó encoding.</p><p>Tương tự với client, server sau khi nhận được data sẽ dựa vào <code>Content-Encoding</code> do client gửi lên để xác định thuật toán decoding sau đó decoding. ßß Sau khi xử lý dữ liệu xong, server sẽ encoding sau đó cũng trả về dữ liệu ở <code>Content-Encoding</code> để xác định thuật tó encoding.</p><h4 id="_1-so-thuat-toan-encoding" tabindex="-1">1 số thuật toán encoding <a class="header-anchor" href="#_1-so-thuat-toan-encoding" aria-label="Permalink to &quot;1 số thuật toán encoding&quot;">​</a></h4><ul><li>gzip</li><li>compress(Lỗi thời, giờ ít dùng)</li><li>brotli (Thuật toán mới được sử dụng nhiều hiện tại)</li></ul><div class="language-List_DEMO vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">List_DEMO</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Accept-Encoding: compress, gzip</span></span>\n<span class="line"><span>       Accept-Encoding:</span></span>\n<span class="line"><span>       Accept-Encoding: *</span></span>\n<span class="line"><span>       Accept-Encoding: compress;q=0.5, gzip;q=1.0</span></span>\n<span class="line"><span>       Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-6-chunked-transfer-encoding" tabindex="-1">1.6 Chunked Transfer Encoding <a class="header-anchor" href="#_1-6-chunked-transfer-encoding" aria-label="Permalink to &quot;1.6 Chunked Transfer Encoding&quot;">​</a></h3><p>Cho phép gửi dữ liệu theo từng phần, dữ liệu sẽ được chia nhỏ và gửi.</p><h3 id="_1-7-media-type" tabindex="-1">1.7 Media type. <a class="header-anchor" href="#_1-7-media-type" aria-label="Permalink to &quot;1.7 Media type.&quot;">​</a></h3><p>HTTP 1.1 hỗ trợ các Media type như ảnh, video, nhạc. Việc xác định dữ liệu thuộc loại media type nào được xác định trong HEAD <code>Content-Type</code>. Ví dụ: <code>image/webp</code></p><div class="language-Format vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Format</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    media-type     = type &quot;/&quot; subtype *( &quot;;&quot; parameter )</span></span>\n<span class="line"><span>       type           = token</span></span>\n<span class="line"><span>       subtype        = token</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-8-product-tokens" tabindex="-1">1.8 Product Tokens <a class="header-anchor" href="#_1-8-product-tokens" aria-label="Permalink to &quot;1.8 Product Tokens&quot;">​</a></h3><p>Product Tokens được sử dụng để các ứng dụng phần mềm giao tiếp với nhau xác định theo tên và phiên bản phần mềm. Example:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> User-Agent: CERN-LineMode/2.15 libwww/2.17b3</span></span>\n<span class="line"><span> Server: Apache/0.8.4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-9-quality-values" tabindex="-1">1.9 Quality Values <a class="header-anchor" href="#_1-9-quality-values" aria-label="Permalink to &quot;1.9 Quality Values&quot;">​</a></h3><p>Quality Values là một giá trị có số từ 0-1. Nếu 1 loại data có nhiều lựa chọn thì chúng ta có thể sử dụng Quality Values để xác định mức độ ưu tiên.</p><p>Ví dụ : <code>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</code> Trong ví dụ trên gzip được đặt là <code>1</code> và identity là <code>0.5</code>.</p><p>Vì vậy <code>gzip</code> được đặt mức độ ưu tiên cao nhất, nếu máy chủ hoặc client có thể hỗ trợ gzip thì sẽ ưu tiên gzip, nếu không hỗ trợ gzip hoặc vì một lý do gì đó không thể sử dụng gzip thì sẽ sử dụng identity.</p><p><code>*</code> được đặt là 0, vì vậy nếu có cả gzip và identity đều không hỗ trợ thì sẽ báo lỗi chứ không nên sử dụng bất kỳ loại khác.</p><h3 id="_1-10-language-tags" tabindex="-1">1.10 Language Tags <a class="header-anchor" href="#_1-10-language-tags" aria-label="Permalink to &quot;1.10 Language Tags&quot;">​</a></h3><p>Đây là giá trị để xác định các ngôn ngữ hỗ trợ và muốn sử dụng theo mức độ ưu tiên Ví dụ: <code>Accept-Language: en-US,en;q=0.9,vi;q=0.8</code></p><h3 id="_1-11-entity-tags" tabindex="-1">1.11 Entity Tags <a class="header-anchor" href="#_1-11-entity-tags" aria-label="Permalink to &quot;1.11 Entity Tags&quot;">​</a></h3><p>Entity Tags thường được viết tắt là Etag, sử dụng để nhận dạng phiên bản cụ thể của một tài nguyên. ETag thường được sử dụng trong HTTP để kiểm tra xem liệu một tài nguyên đã thay đổi kể từ lần truy cập trước của client hay không.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>   entity-tag = [ weak ] opaque-tag</span></span>\n<span class="line"><span>      weak       = &quot;W/&quot;</span></span>\n<span class="line"><span>      opaque-tag = quoted-string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Lần đầu client gửi yêu cầu tài nguyên, server trả về tài nguyên kèm theo Etag của tài nguyên ở Header.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Etag:</span></span>\n<span class="line"><span>W/&quot;660e136c-4da1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Khi client gửi yêu cầu lại tài nguyên, client sẽ gửi kèm với Etag trong yêu cầu ở Header với tên Header là <code>If-None-Match</code>, máy chủ sẽ kiểm tra ETag xem có phiên bản mới của tài nguyên so với ETag đó không.</p><p>Nếu có, máy chủ sẽ gửi về tài nguyên mới cho client, nếu chưa có thay đổi, máy chủ sẽ trả về status 304 Not Modified để thông báo không có thay đổi và client sẽ sử dụng từ cache.</p><p><img src="/assets/1.2ZXVPxfk.png" alt=""> Như ảnh ở trên, khi giá trị trả về 304 thì body sẽ rỗng.</p><h3 id="_1-12-range-units" tabindex="-1">1.12 Range Units <a class="header-anchor" href="#_1-12-range-units" aria-label="Permalink to &quot;1.12 Range Units&quot;">​</a></h3><p>HTTP/1.1 cho phép client gửi request một phần của tài nguyên cụ thể.</p><p>Ví dụ tài nguyên video cho tổng dung lượng 9000 byte với 1 byte là 1s của video, client có thể gửi yêu cầu lấy byte từ 10-100 để lấy byte 10 đến 100 cho giây từ 10 đến 100 của video.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Range: bytes 10-100/9000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>giá trị các number ở đây là luôn luôn là byte.</p><h2 id="_2-http-message" tabindex="-1">2. HTTP Message <a class="header-anchor" href="#_2-http-message" aria-label="Permalink to &quot;2. HTTP Message&quot;">​</a></h2><p>HTTP message bao gồm các request từ client đến server và response từ server đến client.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HTTP-message   = Request | Response     ; HTTP/1.1 messages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-1-1-message-headers" tabindex="-1">2.1.1 Message Headers <a class="header-anchor" href="#_2-1-1-message-headers" aria-label="Permalink to &quot;2.1.1 Message Headers&quot;">​</a></h4><p>Bao gồm các Header fields được kèm theo trên request hoặc response. Format của header là <code>message-header = field-name &quot;:&quot; [ field-value ]</code></p><h4 id="_2-1-2-request-message-tin-nhan-yeu-cau" tabindex="-1">2.1.2 Request Message(Tin nhắn yêu cầu) <a class="header-anchor" href="#_2-1-2-request-message-tin-nhan-yeu-cau" aria-label="Permalink to &quot;2.1.2 Request Message(Tin nhắn yêu cầu)&quot;">​</a></h4><p>Được gửi từ client đến server để yêu cầu một tài nguyên cụ thể, ví dụ một trang web html hoặc một file.</p><h4 id="_2-1-3-response-message-tin-nhan-phan-hoi" tabindex="-1">2.1.3 Response Message(Tin nhắn phản hồi) <a class="header-anchor" href="#_2-1-3-response-message-tin-nhan-phan-hoi" aria-label="Permalink to &quot;2.1.3 Response Message(Tin nhắn phản hồi)&quot;">​</a></h4><p>Được gửi từ server đến client, chứa thông tin và nội dung mà client đã yêu cầu.</p><h4 id="_2-1-4-message-body" tabindex="-1">2.1.4 Message Body <a class="header-anchor" href="#_2-1-4-message-body" aria-label="Permalink to &quot;2.1.4 Message Body&quot;">​</a></h4><p>Phần body(Có thể có hoặc không ) chứa tin nhắn sử dụng để gửi các thông tin đến server khi yêu cầu hoặc trả về phản hồi cho client.</p><h2 id="_3-request" tabindex="-1">3 Request <a class="header-anchor" href="#_3-request" aria-label="Permalink to &quot;3 Request&quot;">​</a></h2><p>Một request gửi đến server sẽ có format sau:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>     Request       = Request-Line              ; </span></span>\n<span class="line"><span>                        *(( general-header        ; </span></span>\n<span class="line"><span>                         | request-header         ; </span></span>\n<span class="line"><span>                         | entity-header ) CRLF)  ; </span></span>\n<span class="line"><span>                        CRLF</span></span>\n<span class="line"><span>                        [ message-body ]          ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-1-request-line" tabindex="-1">3.1 Request-Line <a class="header-anchor" href="#_3-1-request-line" aria-label="Permalink to &quot;3.1 Request-Line&quot;">​</a></h3><p>Request Line bắt đầu bằng loại Method(GEt,POST..etc..) url và phiên bản của protocol và được kết thúc bằng (CRLF)</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Request-Line   = Method SP Request-URI SP HTTP-Version CRLF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="/assets/2.7HMIo15l.jpg" alt=""><code>GET / HTTP/1.1</code>: Là dòng đầu tiên của yêu cầu HTTP, cho biết phương thức là GET (yêu cầu dữ liệu từ máy chủ), đường dẫn yêu cầu là <code>/</code> (tức là trang chính của trang web), và phiên bản giao thức HTTP là 1.1.</p><h3 id="_3-1-1-method" tabindex="-1">3.1.1 Method <a class="header-anchor" href="#_3-1-1-method" aria-label="Permalink to &quot;3.1.1 Method&quot;">​</a></h3><p>Method cho biết cách thức thực hiện trên tài nguyên được xác định bởi URI request, Method sẽ phân biệt chữ hoa và thường.</p><ul><li>Các loại method: <ul><li><strong>OPTIONS</strong>: Method này được sử dụng để yêu cầu các thông tin liên lạc request/response của một URI. Method này cho phép client xác đinh các optional hoặc các requirements đến máy chủ và không yêu cầu lấy tài nguyên. <ul><li>Response của method này không được cache.</li><li>Ví dụ: Sử dụng OPTIONS để lấy về danh sách method hỗ trợ bởi URI, kiểm tra tài nguyên có tồn tại không....</li></ul></li><li><strong>GET</strong>: Method sử dụng để lấy về tài nguyên trên máy chủ được xác định bởi URI request. <ul><li>Response của method này có thể cache.</li><li>Ví dụ: Lấy về tài nguyên âm nhạc, video, html.</li></ul></li><li><strong>HEAD</strong>: Method <strong>HEAD</strong> được sử dụng để lấy thông tin về HEAD của tài nguyên nhưng không lấy về tài nguyên. <ul><li>Method <strong>HEAD</strong> giống với <strong>GET</strong> nhưng server sẽ không cần trả về nội dung trong response. Thông tin header response của <strong>HEAD</strong> nên trả về giống hệt với <strong>GET</strong>.</li><li>Ví dụ: Sử dụng HEAD để kiểm tra cập nhật version tài nguyên sử dụng header <code>Last-Modified</code>, <code>Content-MD5</code>, <code>ETag</code></li></ul></li><li><strong>POST</strong>: Method <strong>POST</strong> được sử dụng để gửi dữ liệu đến máy chủ để tạo mới tài nguyên trên máy chủ hoặc gửi dữ liệu đến máy chủ xử lý.(Tạo tài nguyên hoặc thực hiện 1 hành động trên các tài nguyên) <ul><li>Cập nhật dữ liệu: Nếu Method POST này không thực sự tạo ra một dữ liệu mới là nó chỉ đơn giản là thay đổi trạng thái, hoặc cập nhật hoặc thực hiện hành động. <ul><li>Nên trả về 200 để thông báo thực hiện thành công và response của POST có nội dung mô tả kết quả của hành động</li><li>Nên trả về 204 để thông báo thực hiện thành công và response của POST không có nội dung trả về cùng response.</li></ul></li><li>Nếu Method <strong>POST</strong> thực hiện tạo ra một dữ liệu mới, response nên trả về 201(Created) và nên có nội dung ở response để mô tả đến tài nguyên mới.</li><li>Response của POST không nên được lưu vào cache</li></ul></li><li><strong>PUT</strong>: <strong>PUT</strong> được sử dụng để gửi dữ liệu đến máy chủ để tạo mới hoặc cập nhật một tài nguyên với dữ liệu cụ thể trong yêu cầu. <ul><li>Nếu là tạo mới dữ liệu thành công, nên trả về 201(Created) status.</li><li>Nếu tài nguyên được sử đổi thì nên trả về 200 kèm theo nội dung mô tả hoặc 204 khi không cần nội dung mô tả.</li><li><strong>POST</strong> có thể thực hiện trên các tài nguyên không cụ thể, nhưng với <strong>PUT</strong> sẽ chỉ thực hiện trên 1 tài nguyên cụ thể, nếu yêu cầu cần thực hiện cho một tài nguyên khác trạng thái 301 sẽ được trả về.</li></ul></li><li><strong>DELETE</strong>: Yêu cầu máy chủ xóa tài nguyên. Tuy nhiên máy chủ có thể cho phép hoặc không cho phép xóa. <ul><li>Trả về 200 nếu xóa thành công và bao gồm trạng thái ở response nếu là xóa mềm</li><li>Trả về 202 khi máy chủ đã tiếp nhận yêu cầu nhưng chưa được release hiện tại(Xóa ở tương lai)</li><li>Trả về 204 nếu thực tài nguyên đã bị xóa hoặc trạng thái 202 ở lần gọi trước để được thực hiện.(Thường xóa cứng sẽ trả về)</li></ul></li><li><strong>TRACE</strong>: TRACE được sử nhiều chủ yếu cho mục đích debug để client xác định server nhận chính xác các dữ liệu client gửi lên. <ul><li>Ví dụ: Client gửi body, param và header lên máy chủ. Để debug, khi máy chủ nhận được request sẽ response lại chính các nội dung đó đến client.</li><li><strong>TRACE</strong> giúp debug để kiểm tra khi request đi từ client đến máy chủ xử lý có thể đi qua nhiều trung gian, client có thể debug để xác định dữ liệu không bị thay đổi.</li></ul></li><li><strong>CONNECT</strong>:</li></ul></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><p>Do kế hoạch thay đổi, mình sẽ sang học <code>Message and event stream</code> trước</p><h2 id="ref" tabindex="-1">REF: <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;REF:&quot;">​</a></h2><ul><li><a href="https://www.rfc-editor.org/rfc/rfc2616.html" target="_blank" rel="noreferrer">https://www.rfc-editor.org/rfc/rfc2616.html</a></li></ul>',106)];const h=n(s,[["render",function(n,t,i,s,h,c){return a(),e("div",null,l)}]]);export{i as __pageData,h as default};
